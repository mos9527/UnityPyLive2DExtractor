"""Simple codegen for typetree classes

limitations:
- untested with Namespace references outside its own scope
"""

# From https://github.com/K0lb3/UnityPy/blob/master/generators/ClassesGenerator.py
BASE_TYPE_MAP = {
    "char": "str",
    "short": "int",
    "int": "int",
    "long long": "int",
    "unsigned short": "int",
    "unsigned int": "int",
    "unsigned long long": "int",
    "UInt8": "int",
    "UInt16": "int",
    "UInt32": "int",
    "UInt64": "int",
    "SInt8": "int",
    "SInt16": "int",
    "SInt32": "int",
    "SInt64": "int",
    "Type*": "int",
    "FileSize": "int",
    "float": "float",
    "double": "float",
    "bool": "bool",
    "string": "str",
    "TypelessData": "bytes",
    # -- Extra
    "Byte[]": "bytes",
    "Byte": "int",
    "String": "str",
    "Int32": "int",
    "Single": "float",
    "Color": "ColorRGBA",
    "Vector2": "Vector2f",
    "Vector3": "Vector3f",
    "Vector4": "Vector4f",
}
# XXX: Can't use attrs here since subclassing MonoBehavior and such - though defined by the typetree dump
# seem to be only valid if the class isn't a property of another class
# In which case the MonoBehavior attributes are inherited by the parent class and does not
# initialize the property class
# XXX: Need some boilerplate to handle this
HEADER = "\n".join(
    "# fmt: off",
    "# Auto-generated by https://github.com/mos9527/UnityPyLive2DExtractor/tree/main/UnityPyLive2DExtractor/typetree_codegen.py",
    "" "from typing import List, Union, Optional, TypeVar",
    "from UnityPy.classes import *",
    "from UnityPy.classes.math import (ColorRGBA, Matrix3x4f, Matrix4x4f, Quaternionf, Vector2f, Vector3f, Vector4f, float3, float4,)",
    '''T = TypeVar("T")
def typetree_defined(clazz : T) -> T:
	"""dataclass-like decorator for typetree classess with nested type support
	
	limitations:
	- the behavior is similar to slotted dataclasses where shared attributes are inherited
	  but allows ommiting init of the parent if kwargs are not sufficient
	- generally supports nested types, however untested and could be slow	
    - and ofc, zero type checking and safeguards :/	
	"""
	def __init__(cls, **d):		
		for __base__ in clazz.__bases__:
			types : dict = __base__.__annotations__
			args = {k:d[k] for k in types if k in d}
			if len(args) == len(types):
				super(clazz, cls).__init__(**args)
				for k in args: del d[k]
		types : dict = clazz.__annotations__
		for k, sub in types.items():
			reduce_arg = getattr(sub, "__args__", [None])[0]
			if isinstance(d[k], list) and hasattr(reduce_arg, "__annotations__"):
				setattr(cls, k, [reduce_arg(**x) for x in d[k]])
			elif isinstance(d[k], dict) and hasattr(sub, "__annotations__"):
				setattr(cls, k, sub(**d[k]))
			else:
				if isinstance(d[k], dict):
					setattr(cls, k, sub(**d[k]))
				else:
					setattr(cls, k, sub(d[k]))
	def __repr__(self) -> str:
		return f"{clazz.__name__}({', '.join([f'{k}={getattr(self, k)!r}' for k in self.__annotations__])})"
	clazz.__init__ = __init__
	clazz.__repr__ = __repr__
	return clazz
''',
)
from collections import defaultdict
import argparse, json


def translate_name(m_Name: str, **kwargs):
    m_Name = m_Name.replace("<>", "__generic_")  # Generic templates
    m_Name = m_Name.replace("<", "_").replace(">", "_")  # Templated
    return m_Name


from UnityPy import classes
from logging import getLogger

logger = getLogger("codegen")


def translate_type(
    m_Type: str, strip=False, fallback=True, typenames: dict = dict(), **kwargs
):
    if m_Type in BASE_TYPE_MAP:
        return BASE_TYPE_MAP[m_Type]
    if getattr(classes, m_Type, None):
        return m_Type
    if m_Type in typenames:
        return m_Type
    if m_Type.endswith("[]"):
        m_Type = translate_type(m_Type[:-2], strip, fallback, typenames)
        if not strip:
            return f"List[{m_Type}]"
        else:
            return m_Type
    if m_Type.startswith("PPtr<"):
        m_Type = translate_type(m_Type[5:-1], strip, fallback, typenames)
        if not strip:
            return f"PPtr[{m_Type}]"
        else:
            return m_Type
    if fallback:
        logger.warning(f"Unknown type {m_Type}, using fallback")
        return "object"
    else:
        return m_Type


def declare_field(name: str, type: str, org_type: str = None):
    if type != "object":
        return f"{name} : {type}"
    else:
        return f"{name} : {type} # XXX: Fallback of {org_type}"


from io import TextIOWrapper


def process_namespace(
    namespace: str, typetree_defs: dict, f: TextIOWrapper, import_stmt: str
):
    def emit_line(*lines: str):
        for line in lines:
            f.write(line)
            f.write("\n")
        if not lines:
            f.write("\n")

    emit_line("# Auto-generated by UnityPyLive2DExtractor/typetree_codegen.py")
    emit_line(f"# Python definition for {namespace}", "")
    emit_line(import_stmt)
    # Sort the keys in topological order
    # We don't assume the guarantee otherwise
    graph = {
        clazz: {
            translate_type(field["m_Type"], strip=True, fallback=False)
            for field in fields
            # Don't care about built-ins
        }
        for clazz, fields in typetree_defs.items()
    }
    graph = {k: list(sorted(v)) for k, v in graph.items()}
    vis = defaultdict(lambda: 0)
    topo = list()

    def dfs(u):
        vis[u] = 1
        for v in graph.get(u, []):
            if vis[v] == 1:
                return False
            if vis[v] == 0 and not dfs(v):
                return False
        vis[u] = 2
        topo.append(u)
        return True

    for clazz in graph:
        if not vis[clazz]:
            dfs(clazz)

    emit_line()
    # Emit by topo order
    clazzes = list()
    dp = defaultdict(lambda: -1)
    for clazz in topo:
        fields = typetree_defs.get(clazz, None)
        if not fields:
            logger.warning(
                f"Class {clazz} has no fields defined in TypeTree dump, skipped"
            )
            continue
        # Heuristic: If there is a lvl1 field, it's a subclass
        lvl1 = list(filter(lambda field: field["m_Level"] == 1, fields))
        clazz = translate_name(clazz)
        clazzes.append(clazz)
        clazz_fields = list()
        emit_line(f"@typetree_defined")
        if lvl1:
            parent = translate_type(fields[0]["m_Type"], strip=True, fallback=False)
            emit_line(f"class {clazz}({parent}):")
            # Generated typedefs are guaranteed to be flat in hierarchy
            # Recursive ones are defined by previous/topo order
            if dp[parent] == -1:
                # Reuse parent's fields with best possible effort
                # This is a heuristic and may not be correct
                if pa_dep1 := getattr(classes, parent, None):
                    dp[parent] = len(pa_dep1.__attrs_attrs__)
                else:
                    raise RecursionError("Circular inheritance detected")
            pa_dep1 = dp[parent]
            cur_dep1 = 0
            for i, field in enumerate(
                filter(lambda field: field["m_Level"] == 1, fields)
            ):
                if i < pa_dep1:
                    # Skip parent fields at lvl1
                    continue
                name, type = field["m_Name"], translate_type(
                    field["m_Type"], typenames=typetree_defs
                )
                emit_line(f"\t{declare_field(name, type, field["m_Type"])}")
                clazz_fields.append((name, type, field["m_Type"]))
                cur_dep1 += 1
            dp[clazz] = cur_dep1
        else:
            # No inheritance
            emit_line(f"class {clazz}:")
            for field in fields:
                name, type = field["m_Name"], translate_type(
                    field["m_Type"], typenames=typetree_defs
                )
                emit_line(f"\t{declare_field(name, type, field["m_Type"])}")
                clazz_fields.append((name, type))
        if not clazz_fields:
            # Empty class. Consider MRO
            emit_line("\tpass")


import os, shutil
from typing import Dict


def __main__():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "infile",
        type=str,
        help="Input file. Dump with https://github.com/K0lb3/TypeTreeGenerator",
    )
    parser.add_argument("outdir", type=str, help="Output directory")
    args = parser.parse_args()
    shutil.rmtree(args.outdir, ignore_errors=True)

    TYPETREE_DEFS = json.load(open(args.infile, "r"))
    namespaces = defaultdict(dict)
    for key in TYPETREE_DEFS:
        key = key.split(".")
        if len(key) == 1:
            key = (None, key[0])
        namespace, clazz = key
        namespaces[namespace][clazz] = TYPETREE_DEFS[key]

    handles: Dict[str, TextIOWrapper] = dict()

    def __open(fname: str):
        fname = os.path.join(args.outdir, fname)
        if fname not in handles:
            os.makedirs(os.path.dirname(fname), exist_ok=True)
            handles[fname] = open(fname, "w")
        return handles[fname]

    __open("__init__.py").write(HEADER)
    for namespace, typetree_defs in sorted(
        namespaces.items(), key=lambda x: x[0].count(".")
    ):
        # CubismTaskHandler -> generated/__init__.py
        # Live2D.Cubism.Core.CubismMoc -> generated/Live2D/Cubism/Core.py
        ndots = namespace.count(".") + 1
        dotss = "." * ndots
        if namespace:
            with open(f"{namespace}.py", "w") as f:
                process_namespace(
                    namespace, typetree_defs, f, f"from {dotss} import typetree_defined"
                )
        else:
            with open("__init__.py", "w") as f:
                process_namespace(namespace, typetree_defs, f, "")


if __name__ == "__main__":
    __main__()
